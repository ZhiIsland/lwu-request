import{_ as s,o as n,c as l,V as a}from"./chunks/framework.df15cb86.js";const C=JSON.parse('{"title":"全局配置","description":"","frontmatter":{"outline":"deep"},"headers":[],"relativePath":"config/global.md","filePath":"config/global.md"}'),o={name:"config/global.md"},p=a(`<h1 id="全局配置" tabindex="-1">全局配置 <a class="header-anchor" href="#全局配置" aria-label="Permalink to &quot;全局配置&quot;">​</a></h1><p>这里是插件初始化的全局配置内容。</p><h2 id="baseurl" tabindex="-1">baseUrl <a class="header-anchor" href="#baseurl" aria-label="Permalink to &quot;baseUrl&quot;">​</a></h2><ul><li><strong>类型</strong>: <code>{ dev: string; pro: string; }</code></li><li><strong>默认值</strong>: <code>{dev: &#39;&#39;, pro: &#39;&#39;}</code></li><li><strong>是否必填</strong>: 是</li><li><strong>描述</strong>: 请求域名配置</li></ul><h3 id="dev" tabindex="-1">dev <a class="header-anchor" href="#dev" aria-label="Permalink to &quot;dev&quot;">​</a></h3><ul><li><strong>类型</strong>：<code>string</code></li><li><strong>默认值</strong>: <code></code></li><li><strong>是否必填</strong>: 是</li><li><strong>描述</strong>：开发环境域名</li></ul><h3 id="pro" tabindex="-1">pro <a class="header-anchor" href="#pro" aria-label="Permalink to &quot;pro&quot;">​</a></h3><ul><li><strong>类型</strong>：<code>string</code></li><li><strong>默认值</strong>: <code></code></li><li><strong>是否必填</strong>: 是</li><li><strong>描述</strong>：生产环境域名</li></ul><h2 id="debug" tabindex="-1">debug <a class="header-anchor" href="#debug" aria-label="Permalink to &quot;debug&quot;">​</a></h2><ul><li><strong>类型</strong>：<code>boolean</code></li><li><strong>默认值</strong>: <code>false</code></li><li><strong>是否必填</strong>: 否</li><li><strong>描述</strong>：调试模式，开启后会显示内部调试打印信息</li></ul><h2 id="env" tabindex="-1">env <a class="header-anchor" href="#env" aria-label="Permalink to &quot;env&quot;">​</a></h2><ul><li><strong>类型</strong>：<code>&#39;h5&#39; | &#39;uniapp&#39; | &#39;mp-weixin&#39;</code></li><li><strong>默认值</strong>：<code>uniapp</code></li><li><strong>是否必填</strong>：否</li><li><strong>描述</strong>：运行环境，有效值：<code>&#39;h5&#39;</code>、<code>&#39;uniapp&#39;</code>、<code>&#39;mp-weixin&#39;</code>，默认为 <code>&#39;uniapp&#39;</code><ul><li><code>h5</code>: 运行在浏览器环境，使用 <a href="https://developer.mozilla.org/zh-CN/docs/Web/API/XMLHttpRequest" target="_blank" rel="noreferrer"><code>XMLHttpRequest</code></a> 发送请求</li><li><code>uniapp</code>: 运行在uniapp环境，使用 <a href="https://uniapp.dcloud.net.cn/api/request/request.html" target="_blank" rel="noreferrer"><code>uni.request</code></a> 发送请求</li><li><code>mp-weixin</code>: 运行在微信小程序环境，使用 <a href="https://developers.weixin.qq.com/miniprogram/dev/api/network/request/wx.request.html" target="_blank" rel="noreferrer"><code>wx.request</code></a> 发送请求</li><li><code>1.7.0</code> 及以上版本支持</li></ul></li></ul><h2 id="loading" tabindex="-1">loading <a class="header-anchor" href="#loading" aria-label="Permalink to &quot;loading&quot;">​</a></h2><ul><li><strong>类型</strong>：<code>boolean</code></li><li><strong>默认值</strong>: <code>true</code></li><li><strong>是否必填</strong>: 否</li><li><strong>描述</strong>：请求过程是否显示loading</li></ul><h2 id="loadingtext" tabindex="-1">loadingText <a class="header-anchor" href="#loadingtext" aria-label="Permalink to &quot;loadingText&quot;">​</a></h2><ul><li><strong>类型</strong>：<code>string</code></li><li><strong>默认值</strong>: <code>请求中...</code></li><li><strong>是否必填</strong>: 否</li><li><strong>描述</strong>：请求中loading弹窗的提示文本</li></ul><h2 id="errorhandlebycode" tabindex="-1">errorHandleByCode <a class="header-anchor" href="#errorhandlebycode" aria-label="Permalink to &quot;errorHandleByCode&quot;">​</a></h2><ul><li><strong>类型</strong>: <code>(code: number, errMsg?: string, reject?: (reason?: any) =&gt; void) =&gt; {}</code></li><li><strong>默认值</strong>: <code>(code: number, errMsg?: string, reject?: (reason?: any) =&gt; void) =&gt; {}</code></li><li><strong>是否必填</strong>: 否</li><li><strong>描述</strong>: 业务错误代码拦截处理程序，请根据业务实际情况灵活设置 <ul><li><code>code</code> 参数为http网络状态码，其中 <code>404</code> 为请求地址未找到、<code>408</code> 为请求超时、<code>1009</code> 为客户端网络不可用</li><li><code>reject</code> 参数可以自定义抛出异常，需要 <code>v1.8.2</code> 及以上版本支持</li></ul></li><li><strong>示例</strong>:</li></ul><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#FFCB6B;">errorHandleByCode</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">code</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">number</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">errMsg</span><span style="color:#89DDFF;">?:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">string</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">// console.log(\`【Request Debug:配置】\${code}\`);</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#F07178;"> (</span><span style="color:#A6ACCD;">code</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">===</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">401</span><span style="color:#F07178;">) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">        </span><span style="color:#676E95;font-style:italic;">// 一般为未登录状态，可在这里统一跳转登录页面</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">401拦截演示</span><span style="color:#89DDFF;">&#39;</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">        </span><span style="color:#676E95;font-style:italic;">// 此处仅为演示</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#82AAFF;">msg</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">{</span><span style="color:#F07178;"> title</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">errMsg</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">||</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">未登录，请先登录</span><span style="color:#89DDFF;">&#39;</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">}</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">}</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;font-style:italic;">else</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#F07178;"> (</span><span style="color:#A6ACCD;">code</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">===</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">403</span><span style="color:#F07178;">) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">        </span><span style="color:#676E95;font-style:italic;">// 一般为token过期，可在这里清除token并跳转登录页面处理</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">403拦截演示</span><span style="color:#89DDFF;">&#39;</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">        </span><span style="color:#676E95;font-style:italic;">// 此处仅为演示</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#82AAFF;">msg</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">{</span><span style="color:#F07178;"> title</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">errMsg</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">||</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">登录过期，请重新登录</span><span style="color:#89DDFF;">&#39;</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">}</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">}</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;font-style:italic;">else</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#F07178;"> (</span><span style="color:#A6ACCD;">code</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">===</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">404</span><span style="color:#F07178;">) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">        </span><span style="color:#676E95;font-style:italic;">// 请求不存在</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">404拦截演示</span><span style="color:#89DDFF;">&#39;</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">        </span><span style="color:#676E95;font-style:italic;">// 此处仅为演示</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#82AAFF;">msg</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">{</span><span style="color:#F07178;"> title</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">errMsg</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">||</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">请求资源不存在</span><span style="color:#89DDFF;">&#39;</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">}</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">}</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;font-style:italic;">else</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#F07178;"> (</span><span style="color:#A6ACCD;">code</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">===</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">500</span><span style="color:#F07178;">) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">500拦截演示</span><span style="color:#89DDFF;">&#39;</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#82AAFF;">msg</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">{</span><span style="color:#F07178;"> title</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">errMsg</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">||</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">接口返回错误500</span><span style="color:#89DDFF;">&#39;</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">}</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">}</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;font-style:italic;">else</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#F07178;"> (</span><span style="color:#A6ACCD;">code</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">===</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">502</span><span style="color:#F07178;">) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">500拦截演示</span><span style="color:#89DDFF;">&#39;</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">}</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;font-style:italic;">else</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#F07178;"> (</span><span style="color:#A6ACCD;">code</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">===</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">503</span><span style="color:#F07178;">) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">503拦截演示</span><span style="color:#89DDFF;">&#39;</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">}</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;font-style:italic;">else</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#F07178;"> (</span><span style="color:#A6ACCD;">code</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">!==</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">200</span><span style="color:#F07178;">) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">自定义错误码拦截演示</span><span style="color:#89DDFF;">&#39;</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#82AAFF;">msg</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">{</span><span style="color:#F07178;"> title</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">请求服务异常</span><span style="color:#89DDFF;">&#39;</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">}</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre></div><h2 id="apierrorinterception" tabindex="-1">apiErrorInterception <a class="header-anchor" href="#apierrorinterception" aria-label="Permalink to &quot;apiErrorInterception&quot;">​</a></h2><ul><li><strong>类型</strong>: <code>(data: any, args?: UniApp.RequestSuccessCallbackResult, reject?: (reason?: any) =&gt; void) =&gt; {}</code></li><li><strong>默认值</strong>: <code>(data: any, args?: UniApp.RequestSuccessCallbackResult, reject?: (reason?: any) =&gt; void) =&gt; {}</code></li><li><strong>是否必填</strong>: 否</li><li><strong>描述</strong>: <ul><li>API错误拦截处理程序，请根据业务实际情况灵活设置。</li><li><code>1.1.0</code> 及以上版本支持。</li><li><code>reject</code> 参数可以自定义抛出异常，需要 <code>v1.8.2</code> 及以上版本支持</li></ul></li><li><strong>示例</strong>:</li></ul><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">interface</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Data</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#F07178;">code</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">number</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#FFCB6B;">apiErrorInterception</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">data</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Data</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">args</span><span style="color:#89DDFF;">?:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">UniApp</span><span style="color:#89DDFF;">.</span><span style="color:#FFCB6B;">RequestSuccessCallbackResult</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#F07178;"> (</span><span style="color:#A6ACCD;">data</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">code</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">!==</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">1</span><span style="color:#F07178;">) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#82AAFF;">msg</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">{</span><span style="color:#F07178;"> title</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">请求失败</span><span style="color:#89DDFF;">&#39;</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">}</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre></div><h2 id="xhrcode" tabindex="-1">xhrCode <a class="header-anchor" href="#xhrcode" aria-label="Permalink to &quot;xhrCode&quot;">​</a></h2><ul><li><strong>类型</strong>: <code>&#39;number&#39; | &#39;string&#39;</code></li><li><strong>默认值</strong>: <code></code></li><li><strong>是否必填</strong>: 否</li><li><strong>描述</strong>: API成功状态码 <ul><li><code>1.2.0</code> 及以上版本支持</li><li>设置该参数后，API业务失败时将直接抛出异常，开发者需要在 <code>catch</code> 中捕获API返回的错误信息，或者在 <a href="/config/global.html#apierrorinterception"><code>apiErrorInterception</code></a> 中统一捕获API返回的错误信息</li><li>可配置 <a href="/config/global.html#xhrcodename"><code>xhrCodeName</code></a> 实现自定义接口响应状态码字段名称</li></ul></li></ul><h2 id="xhrcodename" tabindex="-1">xhrCodeName <a class="header-anchor" href="#xhrcodename" aria-label="Permalink to &quot;xhrCodeName&quot;">​</a></h2><ul><li><strong>类型</strong>: <code>string</code></li><li><strong>默认值</strong>: <code>code</code></li><li><strong>是否必填</strong>: 否</li><li><strong>描述</strong>: 语义化接口响应状态码字段名称 <ul><li><code>1.2.0</code> 及以上版本支持</li></ul></li></ul><h2 id="networkexceptionhandle" tabindex="-1">networkExceptionHandle <a class="header-anchor" href="#networkexceptionhandle" aria-label="Permalink to &quot;networkExceptionHandle&quot;">​</a></h2><ul><li><strong>类型</strong>: <code>() =&gt; {}</code></li><li><strong>默认值</strong>: <code>() =&gt; {}</code></li><li><strong>是否必填</strong>: 否</li><li><strong>描述</strong>: 网络异常或者断网处理程序，建议更新缓存中是否断网或者网络繁忙的标识以便前端页面展示没有网络或者断网的通用异常页面</li></ul><h2 id="requestsuccessresponsemsgname" tabindex="-1">requestSuccessResponseMsgName <a class="header-anchor" href="#requestsuccessresponsemsgname" aria-label="Permalink to &quot;requestSuccessResponseMsgName&quot;">​</a></h2><ul><li><strong>类型</strong>: <code>string</code></li><li><strong>默认值</strong>: <code>msg</code></li><li><strong>是否必填</strong>: 否</li><li><strong>描述</strong>: 请求成功时接口响应描述信息字段名称</li></ul><h2 id="tokenstoragekeyname" tabindex="-1">tokenStorageKeyName <a class="header-anchor" href="#tokenstoragekeyname" aria-label="Permalink to &quot;tokenStorageKeyName&quot;">​</a></h2><ul><li><strong>类型</strong>: <code>string</code></li><li><strong>默认值</strong>: <code></code></li><li><strong>是否必填</strong>: 否</li><li><strong>描述</strong>: <ul><li>缓存中token字段名称，方便请求库从缓存获取token完成自动填充token。</li><li><code>1.0.2</code> 及以上版本已废弃，请使用 <code>tokenValue</code> 属性代替。</li></ul></li></ul><h2 id="taskidvalue" tabindex="-1">taskIdValue <a class="header-anchor" href="#taskidvalue" aria-label="Permalink to &quot;taskIdValue&quot;">​</a></h2><ul><li><strong>类型</strong>: <code>(data: any, options?: object) =&gt; Promise&lt;unknown&gt;</code></li><li><strong>默认值</strong>: <code>undefined</code></li><li><strong>是否必填</strong>: 否</li><li><strong>描述</strong>: <ul><li>自定义获取task_id处理程序，通过promise返回最新task_id值即可。</li><li>设置该配置项后 <code>task_id</code> 将失效。</li><li><code>1.5.11</code> 及以上版本支持</li></ul></li></ul><h2 id="tokenvalue" tabindex="-1">tokenValue <a class="header-anchor" href="#tokenvalue" aria-label="Permalink to &quot;tokenValue&quot;">​</a></h2><ul><li><strong>类型</strong>: <code>() =&gt; Promise&lt;string&gt;</code></li><li><strong>默认值</strong>: <code>undefined</code>;</li><li><strong>是否必填</strong>: 否</li><li><strong>描述</strong>: <ul><li>自定义获取token处理程序，通过promise返回最新token值即可</li><li><code>1.0.2</code> 及以上版本支持</li></ul></li><li><strong>示例</strong>:</li></ul><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#FFCB6B;">tokenValue</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">new</span><span style="color:#F07178;"> </span><span style="color:#FFCB6B;">Promise</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">resolve</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;font-style:italic;">_</span><span style="color:#89DDFF;">)</span><span style="color:#F07178;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#89DDFF;font-style:italic;">try</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">            </span><span style="color:#676E95;font-style:italic;">// getToken 为获取token的示例方法，请根据自己的实际业务灵活修改</span></span>
<span class="line"><span style="color:#F07178;">            </span><span style="color:#C792EA;">const</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">token</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">getToken</span><span style="color:#F07178;">()</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">            </span><span style="color:#A6ACCD;">token</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&amp;&amp;</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">resolve</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">token</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">            </span><span style="color:#82AAFF;">resolve</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">&#39;&#39;</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#89DDFF;">}</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;font-style:italic;">catch</span><span style="color:#F07178;"> (</span><span style="color:#A6ACCD;">error</span><span style="color:#F07178;">) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">            </span><span style="color:#82AAFF;">resolve</span><span style="color:#F07178;">(</span><span style="color:#FF9CAC;">false</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">}</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre></div><h2 id="buildquerystring" tabindex="-1">buildQueryString <a class="header-anchor" href="#buildquerystring" aria-label="Permalink to &quot;buildQueryString&quot;">​</a></h2><ul><li><strong>类型</strong>: <code>(obj: object) =&gt; string</code></li><li><strong>默认值</strong>: <code>() =&gt; &#39;&#39;</code></li><li><strong>是否必填</strong>: 否</li><li><strong>描述</strong><ul><li>自定义构建URL参数方式，即用什么方式把请求的params对象数据转为<code>a=1&amp;b=2</code>的格式，默认使用NodeJS内置对象 <code>URLSearchParams</code> 转化，可以自定义通过 <code>qs</code> 插件的方式转化。</li><li><code>GET</code> 请求时有效。</li><li><code>1.0.2</code> 及以上版本支持。</li></ul></li><li><strong>示例</strong>:</li></ul><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;font-style:italic;">import</span><span style="color:#A6ACCD;"> qs </span><span style="color:#89DDFF;font-style:italic;">from</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">qs</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// qs 插件转化示例</span></span>
<span class="line"><span style="color:#FFCB6B;">buildQueryString</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">params</span><span style="color:#89DDFF;">?:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">object</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">qs</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">stringify</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">params</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre></div><h2 id="taketokenmethod" tabindex="-1">takeTokenMethod <a class="header-anchor" href="#taketokenmethod" aria-label="Permalink to &quot;takeTokenMethod&quot;">​</a></h2><ul><li><strong>类型</strong>: <code>&#39;header&#39; | &#39;body&#39;</code></li><li><strong>默认值</strong>: <code>header</code></li><li><strong>是否必填</strong>: 否</li><li><strong>描述</strong>: 请求携带token的方式</li></ul><h2 id="takentokenkeyname" tabindex="-1">takenTokenKeyName <a class="header-anchor" href="#takentokenkeyname" aria-label="Permalink to &quot;takenTokenKeyName&quot;">​</a></h2><ul><li><strong>类型</strong>: <code>string</code></li><li><strong>默认值</strong>: <code>Authorization</code></li><li><strong>是否必填</strong>: 否</li><li><strong>描述</strong>: <ul><li>请求携带token的字段名称。</li><li><code>takeTokenMethod</code> 为 <code>header</code> 时，需要后端同步支持 <code>takenTokenKeyName</code> 的值。</li></ul></li></ul><h2 id="autorefreshtoken" tabindex="-1">autoRefreshToken <a class="header-anchor" href="#autorefreshtoken" aria-label="Permalink to &quot;autoRefreshToken&quot;">​</a></h2><ul><li><strong>类型</strong>: <code>boolean</code></li><li><strong>默认值</strong>: <code>false</code></li><li><strong>是否必填</strong>: 否</li><li><strong>描述</strong>: 是否自动刷新token</li></ul><h2 id="refreshtokenhandle" tabindex="-1">refreshTokenHandle <a class="header-anchor" href="#refreshtokenhandle" aria-label="Permalink to &quot;refreshTokenHandle&quot;">​</a></h2><ul><li><strong>类型</strong>: <code>() =&gt; Promise&lt;unknown&gt;</code></li><li><strong>默认值</strong>: <code></code></li><li><strong>是否必填</strong>: 否</li><li><strong>描述</strong>: <ul><li>自动刷新token程序，返回promise</li><li><code>autoRefreshToken</code> 为 <code>true</code>时生效</li></ul></li></ul><h2 id="tokenexpiredcode" tabindex="-1">tokenExpiredCode <a class="header-anchor" href="#tokenexpiredcode" aria-label="Permalink to &quot;tokenExpiredCode&quot;">​</a></h2><ul><li><strong>类型</strong>: <code>&#39;number&#39; | &#39;string&#39;</code></li><li><strong>默认值</strong>: <code>403</code></li><li><strong>是否必填</strong>: 否</li><li><strong>描述</strong>: 自定义token失效的错误代码，便于请求库内部做自动刷新token判断</li></ul><h2 id="tokenexpiredcodetype" tabindex="-1">tokenExpiredCodeType <a class="header-anchor" href="#tokenexpiredcodetype" aria-label="Permalink to &quot;tokenExpiredCodeType&quot;">​</a></h2><ul><li><strong>类型</strong>: <code>&#39;httpStatusCode&#39; | &#39;apiResponseCode&#39;</code></li><li><strong>默认值</strong>: <code>&#39;httpStatusCode&#39;</code></li><li><strong>是否必填</strong>: 否</li><li><strong>描述</strong>: token失效错误代码类型，支持 <code>httpStatusCode</code> 和 <code>apiResponseCode</code>，默认为 <code>httpStatusCode</code><ul><li><code>httpStatusCode</code>: 原生http请求状态码</li><li><code>apiResponseCode</code>: 接口响应错误码</li></ul></li></ul><h2 id="retry" tabindex="-1">retry <a class="header-anchor" href="#retry" aria-label="Permalink to &quot;retry&quot;">​</a></h2><ul><li><strong>类型</strong>: <code>boolean</code></li><li><strong>默认值</strong>: <code>false</code></li><li><strong>是否必填</strong>: 否</li><li><strong>描述</strong>: 请求失败是否自动重试</li></ul><h2 id="retrycount" tabindex="-1">retryCount <a class="header-anchor" href="#retrycount" aria-label="Permalink to &quot;retryCount&quot;">​</a></h2><ul><li><strong>类型</strong>: <code>number</code></li><li><strong>默认值</strong>: <code>3</code></li><li><strong>是否必填</strong>: 否</li><li><strong>描述</strong>: 请求失败自动重试次数</li></ul><h2 id="retrycountautooffretry" tabindex="-1">retryCountAutoOffRetry <a class="header-anchor" href="#retrycountautooffretry" aria-label="Permalink to &quot;retryCountAutoOffRetry&quot;">​</a></h2><ul><li><strong>类型</strong>: <code>boolean</code></li><li><strong>默认值</strong>: <code>true</code></li><li><strong>是否必填</strong>: 否</li><li><strong>描述</strong>: <ul><li>请求失败重试次数是否自动计算，失败重试次数上限依然是设置的 <code>retryCount </code>值。</li><li>根据 <a href="/intro.html#支持请求失败自动重试【基于指数退避算法】">指数退避算法</a> 自动计算失败重试次数。</li></ul></li></ul><h2 id="retrymaximum" tabindex="-1">retryMaximum <a class="header-anchor" href="#retrymaximum" aria-label="Permalink to &quot;retryMaximum&quot;">​</a></h2><ul><li><strong>类型</strong>: <code>number</code></li><li><strong>默认值</strong>: <code>64</code></li><li><strong>是否必填</strong>: 否</li><li><strong>描述</strong>: 请求失败用来生成重试时间上限（指数退避算法需要），单位秒</li></ul><h2 id="retrydeadline" tabindex="-1">retryDeadline <a class="header-anchor" href="#retrydeadline" aria-label="Permalink to &quot;retryDeadline&quot;">​</a></h2><ul><li><strong>类型</strong>: <code>number</code></li><li><strong>默认值</strong>: <code>10000</code></li><li><strong>是否必填</strong>: 否</li><li><strong>描述</strong>: 请求失败执行重试时间上限（指数退避算法需要），达到上限后不再重试</li></ul><h2 id="before" tabindex="-1">before <a class="header-anchor" href="#before" aria-label="Permalink to &quot;before&quot;">​</a></h2><ul><li><strong>类型</strong>: <code>Function</code></li><li><strong>默认值</strong>: <code></code></li><li><strong>是否必填</strong>: 否 <ul><li><p><strong>描述</strong>: 自定义请求前拦截。</p><ul><li><code>1.3.12</code> 及以上版本支持。</li><li><code>1.5.0</code> 及以上版本增加返回结果。<a href="/ts/interceptor.html#before-请求前拦截返回类型定义">返回结果定义</a></li></ul><div class="danger custom-block"><p class="custom-block-title">提示</p><ul><li><code>1.7.0</code> 及以上版本使用时需要增加 <code>return</code> 结果，示例代码：</li></ul><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;font-style:italic;">import</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">Http</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;font-style:italic;">type</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">BeforeRequestCallbackResult</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">from</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">lwu-request</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> http </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">new</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">Http</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#F07178;">baseUrl</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#F07178;">dev</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;&#39;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#F07178;">pro</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;&#39;</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">},</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#82AAFF;">before</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">res</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">BeforeRequestCallbackResult</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">        </span><span style="color:#676E95;font-style:italic;">// 对返回值做一些操作，比如在 header 里面增加自定义校验字段等场景</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">res</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span></span></code></pre></div><ul><li><code>reject</code> 参数可以自定义抛出异常，需要 <code>v1.8.2</code> 及以上版本支持</li></ul></div><ul><li><code>1.8.4</code> 及以上版本支持修改 <code>data</code> 请求参数。示例代码：</li></ul><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;font-style:italic;">import</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">Http</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;font-style:italic;">type</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">BeforeRequestCallbackResult</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">from</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">lwu-request</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> http </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">new</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">Http</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#F07178;">baseUrl</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#F07178;">dev</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;&#39;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#F07178;">pro</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;&#39;</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">},</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#82AAFF;">before</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">res</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">BeforeRequestCallbackResult</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">        </span><span style="color:#676E95;font-style:italic;">// 对返回值做一些操作，比如在 header 里面增加自定义校验字段等场景</span></span>
<span class="line"><span style="color:#89DDFF;">        </span><span style="color:#676E95;font-style:italic;">// 修改请求参数</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#A6ACCD;">res</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">data</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">           </span><span style="color:#89DDFF;">...</span><span style="color:#A6ACCD;">res</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">data</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#F07178;">            customField</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">customValue</span><span style="color:#89DDFF;">&#39;</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#89DDFF;">};</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">res</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span></span></code></pre></div></li></ul></li></ul><h2 id="after" tabindex="-1">after <a class="header-anchor" href="#after" aria-label="Permalink to &quot;after&quot;">​</a></h2><ul><li><strong>类型</strong>: <code>Function</code></li><li><strong>默认值</strong>: <code></code></li><li><strong>是否必填</strong>: 否</li><li><strong>描述</strong>: 自定义请求后拦截。 <ul><li><code>1.3.12</code> 及以上版本支持。</li><li><code>1.4.13</code> 及以上版本增加返回结果。<a href="/ts/interceptor.html#after-请求后拦截返回类型定义">返回结果定义</a></li></ul><div class="danger custom-block"><p class="custom-block-title">提示</p><ul><li><code>1.7.0</code> 及以上版本使用时需要增加 <code>return</code> 结果，示例代码：</li></ul><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;font-style:italic;">import</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">Http</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;font-style:italic;">type</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">AfterRequestCallbackResult</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">from</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">lwu-request</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> http </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">new</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">Http</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#F07178;">baseUrl</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#F07178;">dev</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;&#39;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#F07178;">pro</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;&#39;</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">},</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#82AAFF;">after</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">res</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">AfterRequestCallbackResult</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">        </span><span style="color:#676E95;font-style:italic;">// 对返回值做一些操作，比如对返回内容做二次转化解析等</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">res</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span></span></code></pre></div><ul><li><code>reject</code> 参数可以自定义抛出异常，需要 <code>v1.8.2</code> 及以上版本支持</li></ul></div></li></ul><h2 id="loadingstarttime" tabindex="-1">loadingStartTime <a class="header-anchor" href="#loadingstarttime" aria-label="Permalink to &quot;loadingStartTime&quot;">​</a></h2><ul><li><strong>类型</strong>: <code>number</code></li><li><strong>默认值</strong>: <code>0</code></li><li><strong>是否必填</strong>: 否</li><li><strong>描述</strong>: <code>loading</code> 动画请求多久后开始展示，单位毫秒 <ul><li>仅支持请求库默认动画</li><li><code>1.7.0</code> 及以上版本支持</li></ul></li></ul><hr><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>下面配置项参考 <a href="https://uniapp.dcloud.io/api/request/request.html" target="_blank" rel="noreferrer">uniapp 网络请求API</a></p></div><h2 id="header" tabindex="-1">header <a class="header-anchor" href="#header" aria-label="Permalink to &quot;header&quot;">​</a></h2><ul><li><strong>类型</strong>: <code>object</code></li><li><strong>默认值</strong>: <code>{}</code></li><li><strong>是否必填</strong>: 否</li><li><strong>描述</strong>: 自定义请求header。 <ul><li><code>1.3.12</code> 及以上版本支持。</li></ul></li></ul><h2 id="timeout" tabindex="-1">timeout <a class="header-anchor" href="#timeout" aria-label="Permalink to &quot;timeout&quot;">​</a></h2><ul><li><strong>类型</strong>：<code>number</code></li><li><strong>默认值</strong>: <code>6000</code><ul><li><code>1.7.0</code> 及以上版本默认值调整为 <code>60 * 1000</code></li></ul></li><li><strong>是否必填</strong>: 否</li><li><strong>描述</strong>：请求超时时间</li></ul><h2 id="method" tabindex="-1">method <a class="header-anchor" href="#method" aria-label="Permalink to &quot;method&quot;">​</a></h2><ul><li><strong>类型</strong>: <code>&#39;GET&#39; | &#39;POST&#39; | &#39;PUT&#39; | &#39;DELETE&#39; | &#39;HEAD&#39; | &#39;CONNECT&#39; | &#39;HEAD&#39; | &#39;OPTIONS&#39; | &#39;TRACE&#39;</code></li><li><strong>默认值</strong>: <code>&#39;GET&#39;</code></li><li><strong>是否必填</strong>: 否</li><li><strong>描述</strong>: 请求方式</li></ul><h2 id="datatype" tabindex="-1">dataType <a class="header-anchor" href="#datatype" aria-label="Permalink to &quot;dataType&quot;">​</a></h2><ul><li><strong>类型</strong>: <code>string</code></li><li><strong>默认值</strong>: <code>&#39;json&#39;</code></li><li><strong>是否必填</strong>: 否</li><li><strong>描述</strong>: 如果设为 json，会对返回的数据进行一次 JSON.parse，非 json 不会进行 JSON.parse</li></ul><h2 id="responsetype" tabindex="-1">responseType <a class="header-anchor" href="#responsetype" aria-label="Permalink to &quot;responseType&quot;">​</a></h2><ul><li><strong>类型</strong>: <code>string</code></li><li><strong>默认值</strong>: <code>text</code></li><li><strong>是否必填</strong>: 否</li><li><strong>描述</strong>: 设置响应的数据类型。合法值：<code>text</code>、<code>arraybuffer</code></li></ul><h2 id="sslverify" tabindex="-1">sslVerify <a class="header-anchor" href="#sslverify" aria-label="Permalink to &quot;sslVerify&quot;">​</a></h2><ul><li><strong>类型</strong>: <code>boolean</code></li><li><strong>默认值</strong>: <code>true</code></li><li><strong>是否必填</strong>: 否</li><li><strong>描述</strong>: 验证 ssl 证书</li></ul><h2 id="withcredentials" tabindex="-1">withCredentials <a class="header-anchor" href="#withcredentials" aria-label="Permalink to &quot;withCredentials&quot;">​</a></h2><ul><li><strong>类型</strong>: <code>boolean</code></li><li><strong>默认值</strong>: <code>false</code></li><li><strong>是否必填</strong>: 否</li><li><strong>描述</strong>: 跨域请求时是否携带凭证（cookies）</li></ul><h2 id="firstipv4" tabindex="-1">firstIpv4 <a class="header-anchor" href="#firstipv4" aria-label="Permalink to &quot;firstIpv4&quot;">​</a></h2><ul><li><strong>类型</strong>: <code>boolean</code></li><li><strong>默认值</strong>: <code>false</code></li><li><strong>是否必填</strong>: 否</li><li><strong>描述</strong>: DNS解析时优先使用ipv4</li></ul><h2 id="完整配置代码演示" tabindex="-1">完整配置代码演示 <a class="header-anchor" href="#完整配置代码演示" aria-label="Permalink to &quot;完整配置代码演示&quot;">​</a></h2><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">	</span><span style="color:#FFCB6B;">baseUrl</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">		</span><span style="color:#676E95;font-style:italic;">/**</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">         * 开发环境域名</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">         */</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#FFCB6B;">dev</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&#39;&#39;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#676E95;font-style:italic;">/**</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">         * 生产环境域名</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">         */</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#FFCB6B;">pro</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&#39;&#39;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#F07178;">	</span><span style="color:#89DDFF;">},</span></span>
<span class="line"><span style="color:#F07178;">	</span><span style="color:#676E95;font-style:italic;">/**</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">     * 调试模式，开启后控制台会显示内部调试打印信息</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">     */</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#FFCB6B;">debug</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#FF9CAC;">false</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#676E95;font-style:italic;">/**</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">     * 运行环境，有效值：\`&#39;h5&#39;\`、\`&#39;uniapp&#39;\`、\`&#39;mp-weixin&#39;\`，默认为 \`&#39;uniapp&#39;\`</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">     * + \`h5\`: 运行在浏览器环境，使用 [\`XMLHttpRequest\`](https://developer.mozilla.org/zh-CN/docs/Web/API/XMLHttpRequest) 发送请求</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">     * + \`uniapp\`: 运行在uniapp环境，使用 [\`uni.request\`](https://uniapp.dcloud.net.cn/api/request/request.html) 发送请求</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">     * + \`mp-weixin\`: 运行在微信小程序环境，使用 [\`wx.request\`](https://developers.weixin.qq.com/miniprogram/dev/api/network/request/wx.request.html) 发送请求</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">     * + \`1.7.0\` 及以上版本支持</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">     */</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#FFCB6B;">env</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">uniapp</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#F07178;">	</span><span style="color:#676E95;font-style:italic;">/**</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">     * 请求过程是否显示loading</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">     */</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#FFCB6B;">loading</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#FF9CAC;">true</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#F07178;">	</span><span style="color:#676E95;font-style:italic;">/**</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">     * 请求中loading弹窗的提示文本，默认为 \`&#39;请求中...&#39;\`</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">     */</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#FFCB6B;">loadingText</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">请求中...</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#676E95;font-style:italic;">/**</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">     * 自定义请求前拦截</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">     * + \`1.3.12\` 及以上版本支持。</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">     */</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#FFCB6B;">before</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">()</span><span style="color:#F07178;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{};</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#676E95;font-style:italic;">/**</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">     * 自定义请求后拦截</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">     * + \`1.3.12\` 及以上版本支持。</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">     */</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#FFCB6B;">after</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">()</span><span style="color:#F07178;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{};</span></span>
<span class="line"><span style="color:#89DDFF;">	</span><span style="color:#676E95;font-style:italic;">// 下面配置项参考 [uniapp 网络请求API](https://uniapp.dcloud.io/api/request/request.html)</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#676E95;font-style:italic;">/**</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">     * 自定义请求头信息</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">     * + \`1.3.12\` 及以上版本支持。</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">     */</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#FFCB6B;">header</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{};</span></span>
<span class="line"><span style="color:#F07178;">	</span><span style="color:#676E95;font-style:italic;">/**</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">     * 请求超时时间，单位ms</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">     */</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#FFCB6B;">timeout</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">6000</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#F07178;">	</span><span style="color:#676E95;font-style:italic;">/**</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">     * 请求方式，有效值：\`&#39;GET&#39;\`、\`&#39;POST&#39;\`、\`&#39;PUT&#39;\`、\`&#39;DELETE&#39;\`、\`&#39;CONNECT&#39;\`、\`&#39;HEAD&#39;\`、\`&#39;OPTIONS&#39;\`、\`&#39;TRACE&#39;\`</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">     */</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#FFCB6B;">method</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">GET</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#F07178;">	</span><span style="color:#676E95;font-style:italic;">/**</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">     * 如果设为 json，会对返回的数据进行一次 JSON.parse，非 json 不会进行 JSON.parse</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">     */</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#FFCB6B;">dataType</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">json</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#F07178;">	</span><span style="color:#676E95;font-style:italic;">/**</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">     * 设置响应的数据类型。合法值：\`text\`、\`arraybuffer\`</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">     */</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#FFCB6B;">responseType</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">text</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#F07178;">	</span><span style="color:#676E95;font-style:italic;">/**</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">     * 验证 ssl 证书</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">     */</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#FFCB6B;">sslVerify</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#FF9CAC;">true</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#F07178;">	</span><span style="color:#676E95;font-style:italic;">/**</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">     * 跨域请求时是否携带凭证（cookies）</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">     */</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#FFCB6B;">withCredentials</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#FF9CAC;">false</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#F07178;">	</span><span style="color:#676E95;font-style:italic;">/**</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">     * DNS解析时优先使用ipv4</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">     */</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#FFCB6B;">firstIpv4</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#FF9CAC;">false</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#F07178;">	</span><span style="color:#676E95;font-style:italic;">/**</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">     * 业务错误代码拦截处理程序，请根据业务实际情况灵活设置</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">     * + \`reject\` 参数可以自定义抛出异常，需要 \`v1.8.2\` 及以上版本支持</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">     * </span><span style="color:#89DDFF;font-style:italic;">@</span><span style="color:#C792EA;font-style:italic;">param</span><span style="color:#676E95;font-style:italic;"> </span><span style="color:#A6ACCD;font-style:italic;">code</span><span style="color:#676E95;font-style:italic;"> </span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">     * </span><span style="color:#89DDFF;font-style:italic;">@</span><span style="color:#C792EA;font-style:italic;">param</span><span style="color:#676E95;font-style:italic;"> </span><span style="color:#A6ACCD;font-style:italic;">errMsg</span><span style="color:#676E95;font-style:italic;"> </span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">     * </span><span style="color:#89DDFF;font-style:italic;">@</span><span style="color:#C792EA;font-style:italic;">returns</span><span style="color:#676E95;font-style:italic;"> </span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">     */</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#FFCB6B;">errorHandleByCode</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">code</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#FFCB6B;">number</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;font-style:italic;">errMsg</span><span style="color:#89DDFF;">?:</span><span style="color:#F07178;"> </span><span style="color:#FFCB6B;">string</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">reject</span><span style="color:#89DDFF;">?:</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">reason</span><span style="color:#89DDFF;">?:</span><span style="color:#F07178;"> </span><span style="color:#FFCB6B;">any</span><span style="color:#89DDFF;">)</span><span style="color:#F07178;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#F07178;"> </span><span style="color:#FFCB6B;">void</span><span style="color:#89DDFF;">)</span><span style="color:#F07178;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{},</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#676E95;font-style:italic;">/**</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">     * API错误拦截处理程序，请根据业务实际情况灵活设置</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">     * + \`1.1.0\` 及以上版本支持</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">     * + \`reject\` 参数可以自定义抛出异常，需要 \`v1.8.2\` 及以上版本支持</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">     * </span><span style="color:#89DDFF;font-style:italic;">@</span><span style="color:#C792EA;font-style:italic;">param</span><span style="color:#676E95;font-style:italic;"> </span><span style="color:#A6ACCD;font-style:italic;">data</span><span style="color:#676E95;font-style:italic;"> API返回内容</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">     * </span><span style="color:#89DDFF;font-style:italic;">@</span><span style="color:#C792EA;font-style:italic;">param</span><span style="color:#676E95;font-style:italic;"> </span><span style="color:#A6ACCD;font-style:italic;">args</span><span style="color:#676E95;font-style:italic;"> uniapp请求API回调结果</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">     */</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#FFCB6B;">apiErrorInterception</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">data</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#FFCB6B;">any</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;font-style:italic;">args</span><span style="color:#89DDFF;">?:</span><span style="color:#F07178;"> </span><span style="color:#FFCB6B;">UniApp</span><span style="color:#89DDFF;">.</span><span style="color:#FFCB6B;">RequestSuccessCallbackResult</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">reject</span><span style="color:#89DDFF;">?:</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">reason</span><span style="color:#89DDFF;">?:</span><span style="color:#F07178;"> </span><span style="color:#FFCB6B;">any</span><span style="color:#89DDFF;">)</span><span style="color:#F07178;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#F07178;"> </span><span style="color:#FFCB6B;">void</span><span style="color:#89DDFF;">)</span><span style="color:#F07178;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{},</span></span>
<span class="line"><span style="color:#F07178;">	</span><span style="color:#676E95;font-style:italic;">/**</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">     * 网络异常或者断网处理程序，建议更新缓存中是否断网或者网络繁忙的标识以便前端页面展示没有网络或者断网的通用异常页面</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">     * </span><span style="color:#89DDFF;font-style:italic;">@</span><span style="color:#C792EA;font-style:italic;">returns</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">     */</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#FFCB6B;">networkExceptionHandle</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">()</span><span style="color:#F07178;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{},</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#676E95;font-style:italic;">/**</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">     * API成功状态码</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">     * + \`1.2.0\` 及以上版本支持</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">     * + 设置该参数后，API业务失败时将直接抛出异常，开发者需要在 \`catch\` 中捕获API返回的错误信息，或者在 \`apiErrorInterception\` 中统一捕获API返回的错误信息</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">     */</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#FFCB6B;">xhrCode</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#676E95;font-style:italic;">/**</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">     * 语义化接口响应状态码字段名称，默认为 \`code\`</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">     * + \`1.2.0\` 及以上版本支持</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">     */</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#FFCB6B;">xhrCodeName</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">code</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#F07178;">	</span><span style="color:#676E95;font-style:italic;">/**</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">     * 请求成功时接口响应描述信息字段名称，默认为 \`&#39;msg&#39;\`</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">     */</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#FFCB6B;">requestSuccessResponseMsgName</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">msg</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#F07178;">	</span><span style="color:#676E95;font-style:italic;">/**</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">     * 缓存中token字段名称，方便请求库从缓存获取token完成自动填充token</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">     */</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#FFCB6B;">tokenStorageKeyName</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&#39;&#39;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#676E95;font-style:italic;">/**</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">     * 自定义获取task_id处理程序，通过promise返回最新task_id值即可</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">     * + \`1.5.11\` 及以上版本支持</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">     */</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#FFCB6B;">taskIdValue</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">undefined,</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#676E95;font-style:italic;">/**</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">     * 自定义获取token处理程序，通过promise返回最新token值即可</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">     * + \`1.0.2\` 及以上版本支持</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">     * </span><span style="color:#89DDFF;font-style:italic;">@</span><span style="color:#C792EA;font-style:italic;">returns</span><span style="color:#676E95;font-style:italic;"> </span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">     * </span><span style="color:#89DDFF;font-style:italic;">@</span><span style="color:#C792EA;font-style:italic;">example</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">     * \`\`\`ts</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">     * tokenValue: () =&gt; {</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">     *      return new Promise((resolve, _) =&gt; {</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">     *          // 获取最新token演示</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">     *          const token = getToken();</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">     *          token &amp;&amp; resolve(token);</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">     *      });</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">     * }</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">     * \`\`\`</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">     */</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#FFCB6B;">tokenValue</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">undefined,</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#676E95;font-style:italic;">/**</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">     * 自定义构建URL参数方式，即用什么方式把请求的params对象数据转为\`a=1&amp;b=2\`的格式，默认使用NodeJS内置对象 \`URLSearchParams\` 转化，可以自定义通过 \`qs\` 插件的方式转化</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">     * + \`1.0.2\` 及以上版本支持</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">     * </span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">     * </span><span style="color:#89DDFF;font-style:italic;">@</span><span style="color:#C792EA;font-style:italic;">example</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">     * \`\`\`ts</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">     * // qs 插件转化示例</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">     * import qs from &#39;qs&#39;;</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">     * </span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">     * return qs.stringify(obj);</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">     * \`\`\`</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">     */</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#FFCB6B;">buildQueryString</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">undefined,</span></span>
<span class="line"><span style="color:#F07178;">	</span><span style="color:#676E95;font-style:italic;">/**</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">     * 请求携带token的方式，有效值：\`header\`、\`body\`</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">     */</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#FFCB6B;">takeTokenMethod</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">header</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#F07178;">	</span><span style="color:#676E95;font-style:italic;">/**</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">     * 请求携带token的字段名称，header方式默认为 \`Authorization\`</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">     */</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#FFCB6B;">takenTokenKeyName</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">Authorization</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#F07178;">	</span><span style="color:#676E95;font-style:italic;">/**</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">     * 是否自动刷新token</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">     */</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#FFCB6B;">autoRefreshToken</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#FF9CAC;">false</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#F07178;">	</span><span style="color:#676E95;font-style:italic;">/**</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">     * 自动刷新token程序，返回promise，\`autoRefreshToken\` 为 \`true\`时生效</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">     */</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#FFCB6B;">refreshTokenHandle</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">()</span><span style="color:#F07178;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{},</span></span>
<span class="line"><span style="color:#F07178;">	</span><span style="color:#676E95;font-style:italic;">/**</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">     * 自定义token失效的错误代码，便于请求库内部做自动刷新token判断</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">     */</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#FFCB6B;">tokenExpiredCode</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">403</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#676E95;font-style:italic;">/**</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">     * token失效错误代码类型，支持 \`httpStatusCode\` 和 \`apiResponseCode\`，默认为 \`httpStatusCode\`</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">     * + \`httpStatusCode\`: 原生http请求状态码</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">     * + \`apiResponseCode\`: 接口响应错误码</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">     * </span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">     * + \`1.5.11\` 及以上版本支持</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">     */</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#FFCB6B;">tokenExpiredCodeType</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">httpStatusCode</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#F07178;">	</span><span style="color:#676E95;font-style:italic;">/**</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">     * 请求失败是否自动重试</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">     */</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#FFCB6B;">retry</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#FF9CAC;">false</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#F07178;">	</span><span style="color:#676E95;font-style:italic;">/**</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">     * 请求失败自动重试次数</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">     */</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#FFCB6B;">retryCount</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">3</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#F07178;">	</span><span style="color:#676E95;font-style:italic;">/**</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">     * 请求失败重试次数是否自动计算，失败重试次数上限依然是设置的retryCount值</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">     */</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#FFCB6B;">retryCountAutoOffRetry</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#FF9CAC;">true</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#F07178;">	</span><span style="color:#676E95;font-style:italic;">/**</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">     * 请求失败用来生成重试时间上限（指数退避算法需要），单位秒</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">     */</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#FFCB6B;">retryMaximum</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">64</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#F07178;">	</span><span style="color:#676E95;font-style:italic;">/**</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">     * 请求失败执行重试时间上限（指数退避算法需要），达到上限后不再重试</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">     */</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#FFCB6B;">retryDeadline</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">10000</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#676E95;font-style:italic;">/**</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">     * \`loading\` 动画请求多久后开始展示，单位毫秒，默认值 0</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">     * + 仅支持请求库默认动画</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">     * + \`1.7.0\` 及以上版本支持</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">     */</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#FFCB6B;">loadingStartTime</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre></div>`,88),e=[p];function t(c,r,i,y,F,D){return n(),l("div",null,e)}const g=s(o,[["render",t]]);export{C as __pageData,g as default};
